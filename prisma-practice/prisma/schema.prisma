// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql" // where the data coming from
  url      = env("DATABASE_URL")
}

model User {
  uid            String          @id @default(uuid())
  name           String
  age            Int
  email          String
  // isAdmin        Boolean
  role           Role            @default(BASIC)
  // blob           Bytes
  writtenPosts   Post[]          @relation("WrittenPosts")
  favouritePosts Post[]          @relation("FavouritePosts")
  userPreference         UserPreference?    @relation(fields: [userPreferenceId], references: [upid])
  userPreferenceId       String?  @unique

  // block based attribute
  @@unique([age, name]) // now we can't have two user with the same name and age
  @@index([email])
}

model UserPreference {
  upid         String  @id @default(uuid())
  emailUpdates Boolean
  user User?
}

model Post {
  pid            String     @id @default(uuid())
  title          String
  averageRating  Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  author         User       @relation("WrittenPosts", fields: [authorId], references: [uid])
  authorId       String
  favouritedBy   User       @relation("FavouritePosts", fields: [favouritedById], references: [uid])
  favouritedById String
  categories     Category[]
}

model Category {
  cid   String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
  EDITOR
}
